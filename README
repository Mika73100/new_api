- installation symfony = symfony new --full my_project

- creation d'un controller = symfony make:controller

- creation de la BDD = symfony console doctrine:database:create

- cree une entitée = symfony console make:entity 

                   ->>>> crée en premier les table SANS relation,
                   ->>>> crée les tables avec les relations

- mettre a jour le schema de la BDD = symfony console doctrine:schema:update --force


________________________________________________________________________________


- Je crée mes controllers a la main avec le debut du nom de mon entity et la suite avec Controller.

            composition d'un controller a ce moment là :

            namespace App\Controller\Api;

            use Symfony\Component\Routing\Annotation\Route;
            use Symfony\Component\HttpFoundation\JsonResponse;
            use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

            class SecurityController extends AbstractController
            {
                /////////////ici je cree la route pour le login///////////
                #[Route('/login', name: 'api_login', methods:["POST", "GET"])]

                public function login(): JsonResponse
                {
                    return new JsonResponse( data: 'login');
                }
            }


________________________________________________________________________________

installation du bundle TOKEN sur le projet : 

ce rendre sur la page github : https://github.com/lexik/LexikJWTAuthenticationBundle/blob/2.x/Resources/doc/index.rst#getting-started

-installation => $ php composer.phar require 

-installation => "lexik/jwt-authentication-bundle"

Puis suivre la doc de configuration des bundles.

________________________________________________________________________________________________________________________

LOGIN :

    /////////////ici je cree la route pour le login///////////
    #[Route('/api/login', name: 'api_login', methods:["POST", "GET"])]

    public function login(): JsonResponse
    {
        $data = $this->globals->jsondecode();
        if (!isset(
            $data->username,
            $data->password,
            ))

        return new JsonResponse( data: 'form invalid', status: 500);

        $user = $this->userRepo->findOneBy(['username' => $data->username]);

        //je verifie si USER existe:
        if (!$user)
            return new JsonResponse( data: 'username not found', status: 500);

        //je verifie si le password et juste:
        // if (!$user) 
        //     return new JsonResponse( data: 'password invalid', status: 500);
        
        return new JsonResponse([
            'username' => $user->getUsername(),
            'password' => $user->getPassword()
        ]);
    }



REGISTER:

    /////////////ici je cree la route pour le register///////////
    #[Route('/api/register', name: 'api_register', methods:["POST", "GET"])]

    public function register(EntityManagerInterface $entityManager): JsonResponse
    {
        $data = $this->globals->jsondecode();
        if (!isset(
            $data->username,
            $data->firstname,
            $data->lastname,
            $data->password,
            $data->fk_pays
            ))

        return new JsonResponse( data: 'error', status: 500);


        $fk_pays = $this->paysRepo->findOneBy(['id' => $data->fk_pays, 'active' => true]);
        $user = (new TUser())
            ->setActive( active: true )
            ->setUsername( $data -> username )
            ->setFirstname( $data -> firstname )
            ->setLastname( $data -> lastname )
            ->setFkPays( $fk_pays );
            //->setDateSave( new \DateTime());
            
        $user->setPassword($data->password);

        $entityManager->persist($user);
        $entityManager->flush();

        return new JsonResponse( data: 'register succesfull !');
    }



____________________________________________________________________________________________________


